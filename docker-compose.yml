version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: sop-qa-postgres
    environment:
      POSTGRES_DB: sop_qa_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sop-qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: sop-qa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sop-qa-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch (用于向量搜索)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sop-qa-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - sop-qa-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sop-qa-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/sop_qa_db
      - REDIS_URL=redis://:redis123@redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=your-secret-key-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=1073741824
      - ALLOWED_EXTENSIONS=pdf,doc,docx,txt,md
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - sop-qa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sop-qa-frontend
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - sop-qa-network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm start
    stdin_open: true
    tty: true

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: sop-qa-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - sop-qa-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # 文档处理服务 (可选，用于异步处理大文件)
  document_processor:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: sop-qa-document-processor
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/sop_qa_db
      - REDIS_URL=redis://:redis123@redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WORKER_CONCURRENCY=2
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - sop-qa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=info --concurrency=2

  # 定时任务服务
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: sop-qa-scheduler
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/sop_qa_db
      - REDIS_URL=redis://:redis123@redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - sop-qa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=info

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: sop-qa-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sop-qa-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana 监控面板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: sop-qa-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sop-qa-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sop-qa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16